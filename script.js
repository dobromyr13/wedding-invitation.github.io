// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
ymaps.ready(init);

function init() {
  const restaurantCoordinates = [52.707286, 41.569664];
  const map = new ymaps.Map("map", {
    center: restaurantCoordinates,
    zoom: 15,
  });

  const placemark = new ymaps.Placemark(restaurantCoordinates, {
    hintContent: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ü–µ—Ä—É–Ω"',
    balloonContent: "–ú—ã –∂–¥–µ–º –≤–∞—Å –∑–¥–µ—Å—å!",
  });

  map.geoObjects.add(placemark);
}

// –°—á–µ—Ç—á–∏–∫
function updateCountdown() {
  const weddingDate = new Date("2025-08-08T16:00:00");
  const now = new Date();
  const diff = weddingDate - now;

  const totalDays = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  document.getElementById("days").textContent = totalDays;
  document.getElementById("hours").textContent = hours
    .toString()
    .padStart(2, "0");
  document.getElementById("minutes").textContent = minutes
    .toString()
    .padStart(2, "0");
  document.getElementById("seconds").textContent = seconds
    .toString()
    .padStart(2, "0");
}

updateCountdown();
setInterval(updateCountdown, 1000);

// –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
document.addEventListener("DOMContentLoaded", function () {
  const animatedElements = document.querySelectorAll(
    ".header-decoration, .invitation-block, .date-block, .countdown, .additional-photo-block, .section"
  );

  const checkVisibility = () => {
    animatedElements.forEach((element) => {
      const elementTop = element.getBoundingClientRect().top;
      const elementBottom = element.getBoundingClientRect().bottom;

      if (
        elementTop < window.innerHeight * 0.8 &&
        elementBottom > 0 &&
        !element.classList.contains("visible")
      ) {
        element.classList.add("visible");
      }
    });
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  checkVisibility();

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  window.addEventListener("scroll", checkVisibility);
  window.addEventListener("resize", checkVisibility);

  // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤–∏–¥–∏–º—ã–µ –±–ª–æ–∫–∏ —Å—Ä–∞–∑—É
  animatedElements.forEach((element) => {
    if (element.getBoundingClientRect().top < window.innerHeight) {
      element.classList.add("visible");
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = "TOKEN";
const CHAT_ID = "CHAT_ID";

document.addEventListener("DOMContentLoaded", function () {
  // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
  const form = document.getElementById("telegram-form");
  const submitBtn = document.getElementById("telegram-submit");
  const successBlock = document.getElementById("telegram-success");
  const guestNameInput = document.getElementById("guest-name");
  const songInput = document.getElementById("song");
  const songFormGroup = document.getElementById("song-form-group");

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
  if (
    !form ||
    !submitBtn ||
    !successBlock ||
    !guestNameInput ||
    !songInput ||
    !songFormGroup
  ) {
    console.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã");
    return;
  }

  console.log("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã");

  // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ü—Ä–∏–¥—É/–ù–µ –ø—Ä–∏–¥—É"
  document.querySelectorAll('input[name="attendance"]').forEach((radio) => {
    radio.addEventListener("change", function () {
      songFormGroup.style.display =
        this.value === "–Ø –ø—Ä–∏–¥—É!" ? "block" : "none";
      console.log("–í—ã–±—Ä–∞–Ω–æ:", this.value);
    });
  });

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  submitBtn.addEventListener("click", async function (e) {
    e.preventDefault();
    console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞");

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = {
      name: guestNameInput.value.trim(),
      attendance: document.querySelector('input[name="attendance"]:checked')
        ?.value,
      song: songInput.value.trim(),
    };

    console.log("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", formData);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name) {
      showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è");
      guestNameInput.focus();
      return;
    }

    if (!formData.attendance) {
      showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞");
      return;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = true;
    submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";
    console.log("–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö");

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = createMessage(formData);
      console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      const response = await sendToTelegram(message);
      console.log("–û—Ç–≤–µ—Ç –æ—Ç Telegram:", response);

      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      showSuccess();
      console.log("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      showError(getErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram";
    }
  });

  // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏

  function createMessage(data) {
    return (
      `üéâ <b>–ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É!</b>\n\n` +
      `üë§ <b>–ò–º—è:</b> ${escapeHtml(data.name)}\n` +
      `‚úèÔ∏è <b>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${data.attendance}\n` +
      (data.attendance === "–Ø –ø—Ä–∏–¥—É!" && data.song
        ? `üéµ <b>–õ—é–±–∏–º—ã–π —Ç—Ä–µ–∫:</b> ${escapeHtml(data.song)}\n`
        : "") +
      `\n<i>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> ${new Date().toLocaleString()}`
    );
  }

  async function sendToTelegram(message) {
    const response = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: "HTML",
        }),
      }
    );

    return await response.json();
  }

  function showSuccess() {
    form.style.display = "none";
    successBlock.style.display = "block";
  }

  function showError(message) {
    const errorDiv = document.createElement("div");
    errorDiv.className = "form-error";
    errorDiv.textContent = message;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    const oldError = form.querySelector(".form-error");
    if (oldError) oldError.remove();

    form.prepend(errorDiv);
  }

  function getErrorMessage(error) {
    if (error.message.includes("chat not found")) {
      return "–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º";
    } else if (error.message.includes("bot was blocked")) {
      return "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    } else {
      return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
    }
  }

  function escapeHtml(text) {
    return text
      .toString()
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
});
